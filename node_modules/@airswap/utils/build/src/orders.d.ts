import { ethers } from 'ethers';
import { Quote, UnsignedOrder, Order, Signature, UnsignedLightOrder, LightOrder, LightSignature } from '@airswap/types';
export declare function numberToBytes32(number: any): string;
export declare function createOrder({ expiry, nonce, signer, sender, affiliate, }: {
    expiry?: string;
    nonce?: number;
    signer?: {};
    sender?: {};
    affiliate?: {};
}): UnsignedOrder;
export declare function parseOrderFromHex(data: string): object;
export declare function createOrderForQuote(quote: Quote, signerWallet: string, senderWallet: string): UnsignedOrder;
export declare function createSignature(order: UnsignedOrder, wallet: ethers.Wallet, swapContract: string): Promise<Signature>;
export declare function signOrder(order: UnsignedOrder, wallet: ethers.Wallet, swapContract: string): Promise<Order>;
export declare function createTypedDataSignature(unsignedOrder: UnsignedOrder, privateKey: string, swapContract: string): Promise<Signature>;
export declare function signTypedDataOrder(order: UnsignedOrder, privateKey: string, swapContract: string): Promise<Order>;
export declare function hasValidSignature(order: any): boolean;
export declare function isValidOrder(order: Order): boolean;
export declare function isValidLightOrder(order: LightOrder): boolean;
export declare function createLightOrder({ expiry, nonce, signerWallet, signerToken, signerAmount, signerFee, senderWallet, senderToken, senderAmount, }: {
    expiry?: number;
    nonce?: number;
    signerWallet?: string;
    signerToken?: string;
    signerAmount?: number;
    signerFee?: number;
    senderWallet?: string;
    senderToken?: string;
    senderAmount?: number;
}): {
    expiry: string;
    nonce: string;
    signerWallet: string;
    signerToken: string;
    signerAmount: string;
    signerFee: string;
    senderWallet: string;
    senderToken: string;
    senderAmount: string;
};
export declare function createLightSignature(unsignedOrder: UnsignedLightOrder, privateKey: string, swapContract: string, chainId: number): Promise<LightSignature>;
export declare function getSignerFromLightSignature(order: UnsignedLightOrder, swapContract: string, chainId: number, v: string, r: string, s: string): string;
export declare function lightOrderToParams(order: any): any[];
