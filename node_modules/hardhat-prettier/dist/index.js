"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const fs = __importStar(require("fs"));
const glob_1 = __importDefault(require("glob"));
const task_names_1 = require("hardhat/builtin-tasks/task-names");
const config_1 = require("hardhat/config");
const path = __importStar(require("path"));
const prettier_1 = __importDefault(require("prettier"));
function getSolidityFiles(sourcesPath) {
    const solidityFilesGlob = path.join(sourcesPath, "**/*.sol");
    const solidityFiles = glob_1.default.sync(solidityFilesGlob);
    return solidityFiles;
}
async function getOptions(configFile) {
    const prettierOptions = await prettier_1.default.resolveConfig(configFile);
    const options = prettierOptions !== null && prettierOptions !== void 0 ? prettierOptions : {
        plugins: ["prettier-plugin-solidity"],
    };
    return options;
}
config_1.task("format", async (_, hre) => {
    const solidityFiles = getSolidityFiles(hre.config.paths.sources);
    console.log(`Formatting ${solidityFiles.length} file${solidityFiles.length > 1 ? "s" : ""}`);
    const options = await getOptions(hre.config.paths.configFile);
    for (const solidityFile of solidityFiles) {
        const content = fs.readFileSync(solidityFile).toString();
        const formatted = prettier_1.default.format(content, Object.assign(Object.assign({}, options), { filepath: solidityFile }));
        const relativePath = path.relative(hre.config.paths.root, solidityFile);
        if (content !== formatted) {
            console.log(relativePath);
            fs.writeFileSync(solidityFile, formatted);
        }
        else {
            console.log(chalk_1.default.gray(relativePath));
        }
    }
});
config_1.task(task_names_1.TASK_CHECK, async (_, hre, runSuper) => {
    const solidityFiles = getSolidityFiles(hre.config.paths.sources);
    const nonFormattedFiles = [];
    const options = await getOptions(hre.config.paths.configFile);
    for (const solidityFile of solidityFiles) {
        const content = fs.readFileSync(solidityFile).toString();
        const isFormatted = prettier_1.default.check(content, Object.assign(Object.assign({}, options), { filepath: solidityFile }));
        if (!isFormatted) {
            nonFormattedFiles.push(solidityFile);
        }
    }
    if (nonFormattedFiles.length > 0) {
        for (const nonFormattedFile of nonFormattedFiles) {
            const relativePath = path.relative(hre.config.paths.root, nonFormattedFile);
            console.log(chalk_1.default.red(`File ${relativePath} is not formatted. Run the format task to fix it.`));
        }
        process.exit(1);
    }
    console.log(`All files are correctly formatted`);
    return runSuper();
});
//# sourceMappingURL=index.js.map